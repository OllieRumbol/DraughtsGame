{"version":3,"sources":["components/shared/DisplayCard.js","components/home/Counter.js","hooks/useOutsideAlerter.js","components/home/Square.js","components/home/JumpModal.js","logic/playerTips.js","components/home/Board.js","logic/automatedPlayerV1.js","logic/automatedPlayerV2.js","logic/automatedPlayerV3.js","store/MyProvider.js","components/home/PcBoard.js","components/home/Players.js","components/home/Pieces.js","components/home/PiecesTaken.js","components/home/ResultModal.js","components/home/Home.js","components/howToPlay/HowToPlay.js","components/shared/ProjectCard.js","components/about/About.js","components/home/GameSettings.js","components/shared/App.js","index.js"],"names":["DisplayCard","props","Card","Header","title","Body","innerComponent","Counter","ref","useRef","useState","visible","setVisible","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","player1Css","player2Css","state","height","y","width","x","setCounterToMove","click","className","onClick","Square","style","setSquareToMoveTo","ResultModal","handleClose","update","Modal","show","onHide","backdrop","closeButton","Title","Footer","Button","variant","setJumpModalValue","result","checkMoveUp","board","i","j","push","checkMoveDown","checkTakeUp","playerToTake","includes","checkTakeDown","checkKingTake","i2","j2","findPlayerMoves","tipFor","length","piece","list","newList","forEach","element","counter","element2","removeDuplicates","Board","counters","setCounters","counterToMove","squareToMoveTo","showTips","setShowTips","tipButtonText","renderSquares","squares","setSquares","showJumpModal","setShowJumpModal","JumpModalValue","listOfMoves","setListOfMoves","map","row","index","moveCounter","kingMeCheck","setTurn","turn","takeCounter","res","res2","setPlayer1Counter","player1Counter","setPlayer2Counter","player2Counter","clearTips","checkToJumpUpAgain","value","checkToJumpDownAgain","checkMoveCounter","checkTakeCounter","saveBoard","copyBoard","slice","moves","calculatePiecesTaken","player","canTake","player1Moves","concat","player2Moves","setResultsModalTitle","setResultsModalMessage","setShowResultModal","noOneCanMoveCheck","ButtonToolbar","ButtonGroup","size","temp","pop","piecesTakenPlayer1","piecesTakenPlayer2","Tree","this","Value","Left","Right","mainTree","iter","tree","tempArray","KingTree","DownLeft","DownRight","UpLeft","UpRight","checkMoveUpLeft","checkMoveUpRight","checkMoveDownLeft","checkMoveDownRight","factoryForMove","moveHeight","moveWidth","currentHeight","currentWidth","nextHeight","nextWidth","takes","factoryForTakeMove","takeHeight","takeWidth","pickMoveForPlayer2","takeMoves","resultTree","treeToArray","kingTreeToArray","FindAvailableTakeMoves","takeMove","Math","floor","random","results","FindAvailableMoves","GetAvailableBoards","boardInfos","tempBoard","take","tempValue","move","evaluate","minimax","depth","minOrMax","maxEval","bestMove","boardInfo","evaluation","max","minEval","min","player1TakeMoves","GetPiecesTaken","player2TakeMoves","CanPieceBeTaken","MyContext","React","createContext","MyProvider","pcOr2Player","setPcOr2Player","difficulty","setDifficulty","Provider","handlePcOr2PlayerChange","e","handleDifficulty","children","PcBoard","context","useContext","mode","player2Go","setTimeout","player2Move","automatedPlayerV2","automatedPlayerV3","undefined","player2ToGoNext","validMove","alert","Container","fluid","Players","Row","Pieces","PiecesTaken","message","window","location","reload","Home","showResultModal","resultsModalTitle","resultsModalMessage","Col","xl","HowToPlay","ProjectCard","features","feature","Text","Alert","colour","status","About","href","GameSettings","type","name","onChange","checked","setHasSetGameSettings","App","hasSetGameSettings","Jumbotron","data-testid","to","path","exact","component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.03fdc4c1.chunk.js","sourcesContent":["import React from \"react\";\nimport Card from 'react-bootstrap/Card';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function DisplayCard(props) {\n\n    return (\n        <div>\n            <Card>\n                <Card.Header><h2>{props.title}</h2></Card.Header>\n                <Card.Body>\n                    {props.innerComponent}\n                </Card.Body>\n            </Card>\n        </div>\n    )\n}","import '../../style/Counter.css';\nimport { useOutsideAlerter } from '../../hooks/useOutsideAlerter';\n\nexport default function Counter(props) {\n    const { visible, ref } = useOutsideAlerter();\n\n    let player1Css = visible ? \"circle red center yellow\" : \"circle red center\";\n    let player2Css = visible ? \"circle blue center yellow\" : \"circle blue center\";\n\n    const state = props.state;\n    const height = props.y;\n    const width = props.x\n    const setCounterToMove = props.setCounterToMove;\n\n    function click() {\n        setCounterToMove({ state: state, height: height, width: width });\n    }\n\n    if (props.state === 1) {\n        return (\n            <div ref={ref} className={player1Css} onClick={click}></div>\n        )\n    }\n    else if (props.state === 2) {\n        return (\n            <div ref={ref} className={player2Css}onClick={click}></div>\n        )\n    }\n    else if (props.state === 3) {\n        return (\n            <div ref={ref} className={player1Css} onClick={click}>K</div>\n        )\n    }\n    else if (props.state === 4) {\n        return (\n            <div ref={ref} className={player2Css} onClick={click}>K</div>\n        )\n    }\n    else {\n        return (\n            <div></div>\n        )\n    }\n}","import { useState, useRef, useEffect } from \"react\";\n\nexport { useOutsideAlerter }\n\nfunction useOutsideAlerter() {\n    const ref = useRef(null);\n    const [visible, setVisible] = useState(false);\n\n    function handleClickOutside(event) {\n        //Only set visible as true if you have clicked the counter else false\n        if (ref.current && ref.current.contains(event.target)) {\n            setVisible(true);\n        }\n        else{\n            setVisible(false);\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener(\"mousedown\", handleClickOutside, true);\n        return () => {\n            //Tidy up\n            document.removeEventListener(\"mousedown\", handleClickOutside, true);\n        };\n    }, [ref]);\n\n    return { visible, ref }\n}","import Counter from './Counter';\nimport '../../style/Square.css';\n\nexport default function Square(props) {\n    const state = props.state;\n    const style = state === 6 ? \"square tip\" : state !== 0 ? \"square black\" : \"square\";\n    const height = props.y;\n    const width = props.x;\n    const setSquareToMoveTo = props.setSquareToMoveTo;\n\n    function click() {\n        if (state === 5 || state === 6) {\n            setSquareToMoveTo({ height: height, width: width });\n        }\n    }\n\n    return (\n        <div className={style} onClick={click}>\n            <Counter state={state} y={height} x={width} setCounterToMove={props.setCounterToMove}></Counter>\n        </div>\n    )\n}","import React from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function ResultModal(props) {\n    const handleClose = () => props.update(false);\n\n    const handleYes = () => {\n        props.setJumpModalValue(true);\n        handleClose();\n    }\n\n    const handleNo = () => {\n        props.setJumpModalValue(false);\n        handleClose();\n    }\n\n    return (\n        <div>\n            <Modal show={props.show} onHide={handleClose} backdrop=\"static\">\n                <Modal.Header closeButton>\n                    <Modal.Title>Would you like to take again?</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>In draughts players can jump multiple times to take multiple pieces from their opponent.</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={handleYes}>Yes</Button>\n                    <Button variant=\"primary\" onClick={handleNo}>No</Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}","export { findPlayerMoves }\n\nlet result = [];\n\nfunction checkMoveUp(board, i, j) {\n    try {\n        //Check left side\n        if (board[i - 1][j - 1] === 5 || board[i - 1][j - 1] === 6) {\n            result.push({ height: i - 1, width: j - 1 });\n        }\n    }\n    catch { }\n\n    try {\n        //Check right side\n        if (board[i - 1][j + 1] === 5 || board[i - 1][j + 1] === 6) {\n            result.push({ height: i - 1, width: j + 1 });\n        }\n    }\n    catch { }\n}\n\nfunction checkMoveDown(board, i, j) {\n    try {\n        //Check left side\n        if (board[i + 1][j - 1] === 5 || board[i + 1][j - 1] === 6) {\n            result.push({ height: i + 1, width: j - 1 });\n        }\n    }\n    catch { }\n\n    try {\n        //Check right side\n        if (board[i + 1][j + 1] === 5 || board[i + 1][j + 1] === 6) {\n            result.push({ height: i + 1, width: j + 1 });\n        }\n    }\n    catch { }\n}\n\nfunction checkTakeUp(board, i, j, playerToTake) {\n    try {\n        //left\n        if (playerToTake.includes(board[i - 1][j - 1])) {\n            if (board[i - 2][j - 2] === 5 || board[i - 2][j - 2] === 6) {\n                result.push({ height: i - 2, width: j - 2 });\n                checkTakeUp(board, i - 2, j - 2, playerToTake)\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Right\n        if (playerToTake.includes(board[i - 1][j + 1])) {\n            if (board[i - 2][j + 2] === 5 || board[i - 2][j + 2] === 6) {\n                result.push({ height: i - 2, width: j + 2 });\n                checkTakeUp(board, i - 2, j + 2, playerToTake)\n            }\n        }\n    }\n    catch { }\n}\n\nfunction checkTakeDown(board, i, j, playerToTake) {\n    try {\n        //left\n        if (playerToTake.includes(board[i + 1][j - 1])) {\n            if (board[i + 2][j - 2] === 5 || board[i + 2][j - 2] === 6) {\n                result.push({ height: i + 2, width: j - 2 });\n                checkTakeDown(board, i + 2, j - 2, playerToTake)\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Right\n        if (playerToTake.includes(board[i + 1][j + 1])) {\n            if (board[i + 2][j + 2] === 5 || board[i + 2][j + 2] === 6) {\n                result.push({ height: i + 2, width: j + 2 });\n                checkTakeDown(board, i + 2, j + 2, playerToTake)\n            }\n        }\n    }\n    catch { }\n}\n\nfunction checkKingTake(board, i, j, i2, j2, playerToTake) {\n    try {\n        //Down left\n        if (playerToTake.includes(board[i2 + 1][j2 - 1])) {\n            if (board[i2 + 2][j2 - 2] === 5 || board[i2 + 2][j2 - 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 - 2) {\n                    result.push({ height: i2 + 2, width: j2 - 2 });\n                    checkKingTake(board, i2, j2, i2 + 2, j2 - 2, playerToTake);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Down Right\n        if (playerToTake.includes(board[i2 + 1][j2 + 1])) {\n            if (board[i2 + 2][j2 + 2] === 5 || board[i2 + 2][j2 + 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 + 2) {\n                    result.push({ height: i2 + 2, width: j2 + 2 });\n                    checkKingTake(board, i2, j2, i2 + 2, j2 + 2, playerToTake)\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up left\n        if (playerToTake.includes(board[i2 - 1][j2 - 1])) {\n            if (board[i2 - 2][j2 - 2] === 5 || board[i2 - 2][j2 - 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 - 2) {\n                    result.push({ height: i2 - 2, width: j2 - 2 });\n                    checkKingTake(board, i2, j2, i2 - 2, j2 - 2, playerToTake)\n                }\n\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up Right\n        if (playerToTake.includes(board[i2 - 1][j2 + 1])) {\n            if (board[i2 - 2][j2 + 2] === 5 || board[i2 - 2][j2 + 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 + 2) {\n                    result.push({ height: i2 - 2, width: j2 + 2 });\n                    checkKingTake(board, i2, j2, i2 - 2, j2 + 2, playerToTake)\n                }\n\n            }\n        }\n    }\n    catch { }\n}\n\nfunction removeDuplicates(list) {\n    let newList = [];\n\n    list.forEach(element => {\n        if (newList.length === 0) {\n            newList.push(element);\n        }\n        else {\n            let counter = 0;\n            newList.forEach(element2 => {\n                if (element.height === element2.height && element.width === element2.width) {\n                    counter++;\n                }\n            });\n\n            if (counter === 0) {\n                newList.push(element);\n            }\n        }\n    });\n\n    return newList;\n}\n\nfunction findPlayerMoves(board, tipFor) {\n    result = [];\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j]\n            if (piece === tipFor) {\n                if (piece === 1) {\n                    checkMoveUp(board, i, j);\n                    checkTakeUp(board, i, j, [2])\n                }\n                else if (piece === 2) {\n                    checkMoveDown(board, i, j);\n                    checkTakeDown(board, i, j, [1]);\n                }\n                else if (piece === 3) {\n                    checkMoveUp(board, i, j);\n                    checkMoveDown(board, i, j);\n                    checkKingTake(board, i, j, i, j, [2, 4]);\n                }\n                else if (piece === 4) {\n                    checkMoveUp(board, i, j);\n                    checkMoveDown(board, i, j);\n                    checkKingTake(board, i, j, i, j, [1, 3]);\n                }\n            }\n        }\n    }\n\n    return removeDuplicates(result);\n}\n","import React, { useState, useEffect } from \"react\";\nimport Square from './Square';\nimport JumpModal from './JumpModal';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport '../../style/Board.css';\nimport { findPlayerMoves } from '../../logic/playerTips';\n\nexport default function Board(props) {\n    //0 - Counter is never there\n    //1 - Player 1 Counter \n    //2 - Player 2 Counter\n    //3 - Player 1 King Counter\n    //4 - Player 2 King Counter\n    //5 - Playable space\n    //6 - Show player tip\n    const start = [\n        [0, 2, 0, 2, 0, 2, 0, 2],\n        [2, 0, 2, 0, 2, 0, 2, 0],\n        [0, 2, 0, 2, 0, 2, 0, 2],\n        [5, 0, 5, 0, 5, 0, 5, 0],\n        [0, 5, 0, 5, 0, 5, 0, 5],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n    ];\n\n    const [counters, setCounters] = useState(start);\n\n    const [counterToMove, setCounterToMove] = useState(null);\n    const [squareToMoveTo, setSquareToMoveTo] = useState(null);\n\n    const [showTips, setShowTips] = useState(true);\n    let tipButtonText = showTips ? \"Show player tips\" : \"Hide player tips\";\n\n    const [squares, setSquares] = useState(renderSquares());\n\n    const [showJumpModal, setShowJumpModal] = useState(false);\n    const [JumpModalValue, setJumpModalValue] = useState(false);\n\n    const [listOfMoves, setListOfMoves] = useState([]);\n\n    function renderSquares() {\n        return counters.map((row, index) => {\n            let y = index;\n            return (\n                <tr key={y}>\n                    {\n                        row.map((piece, index) => <td key={y + index} className=\"p-0\"><Square state={piece} y={y} x={index} setSquareToMoveTo={setSquareToMoveTo} setCounterToMove={setCounterToMove}></Square></td>)\n                    }\n                </tr>\n            )\n        })\n    }\n\n    function moveCounter() {\n        counters[counterToMove.height][counterToMove.width] = 5;\n        counters[squareToMoveTo.height][squareToMoveTo.width] = counterToMove.state;\n\n        kingMeCheck();\n        setCounters(counters);\n        setSquares(renderSquares());\n        props.setTurn(!props.turn);\n    }\n\n    function takeCounter(res, res2) {\n        counters[counterToMove.height][counterToMove.width] = 5;\n        counters[squareToMoveTo.height][squareToMoveTo.width] = counterToMove.state;\n\n        if (counters[res][res2] === 1 || counters[res][res2] === 3) {\n            props.setPlayer1Counter(props.player1Counter + 1);\n        }\n        else if (counters[res][res2] === 2 || counters[res][res2] === 4) {\n            props.setPlayer2Counter(props.player2Counter + 1);\n        }\n\n        counters[res][res2] = 5;\n\n        kingMeCheck();\n        setCounters(counters);\n        setSquares(renderSquares());\n        props.setTurn(!props.turn);\n    }\n\n    function kingMeCheck() {\n        //Player 1 check\n        if (counterToMove.state === 1) {\n            if (squareToMoveTo.height === 0) {\n                counters[squareToMoveTo.height][squareToMoveTo.width] = 3;\n            }\n        }\n        //Player 2 check\n        else if (counterToMove.state === 2) {\n            if (squareToMoveTo.height === 7) {\n                counters[squareToMoveTo.height][squareToMoveTo.width] = 4;\n            }\n        }\n    }\n\n    function clearTips() {\n        for (let i = 0; i < counters.length; i++) {\n            for (let j = 0; j < counters[i].length; j++) {\n                if (counters[i][j] === 6) {\n                    counters[i][j] = 5;\n                }\n            }\n        }\n\n        setCounters(counters);\n        setSquares(renderSquares());\n    }\n\n    function displayTips() {\n        if (props.turn === true) {\n            let res = findPlayerMoves(counters, 1).concat(findPlayerMoves(counters, 3));\n            res.forEach(element => {\n                counters[element.height][element.width] = 6;\n            });\n        }\n        else if (props.turn === false) {\n            let res = findPlayerMoves(counters, 2).concat(findPlayerMoves(counters, 4));\n            res.forEach(element => {\n                counters[element.height][element.width] = 6;\n            });\n        }\n    }\n\n    function showPlayerTips() {\n        if (showTips) {\n            displayTips();\n            setShowTips(false);\n        }\n        else {\n            clearTips();\n            setShowTips(true);\n        }\n\n        setCounters(counters);\n        setSquares(renderSquares());\n    }\n\n    function noOneCanMoveCheck() {\n        let player1Moves = findPlayerMoves(counters, 1).concat(findPlayerMoves(counters, 3));\n        let player2Moves = findPlayerMoves(counters, 2).concat(findPlayerMoves(counters, 4));\n\n        if (player1Moves.length === 0 && player2Moves.length === 0) {\n            props.setResultsModalTitle(\"Tied game\");\n            props.setResultsModalMessage(\"No player can move. Therefore the game ends in a tie. I hope you had fun playing.\");\n            props.setShowResultModal(true);\n        } else if (player1Moves.length === 0) {\n            props.setResultsModalTitle(\"Player 2 wins\");\n            props.setResultsModalMessage(\"Player 1 can no longer move. Player 2 wins. I hope you had fun playing.\");\n            props.setShowResultModal(true);\n        } else if (player2Moves.length === 0) {\n            props.setResultsModalTitle(\"Player 1 wins\");\n            props.setResultsModalMessage(\"Player 2 can no longer move. Player 1 wins. I hope you had fun playing.\");\n            props.setShowResultModal(true);\n        }\n    }\n\n    function checkToJumpUpAgain(value) {\n        try {\n            //left\n            if (counters[squareToMoveTo.height - 1][squareToMoveTo.width - 1] === value) {\n                if (counters[squareToMoveTo.height - 2][squareToMoveTo.width - 2] === 5 || counters[squareToMoveTo.height - 2][squareToMoveTo.width - 2] === 6) {\n                    return true;\n                }\n            }\n\n            //Right\n            if (counters[squareToMoveTo.height - 1][squareToMoveTo.width + 1] === value) {\n                if (counters[squareToMoveTo.height - 2][squareToMoveTo.width + 2] === 5 || counters[squareToMoveTo.height - 2][squareToMoveTo.width + 2] === 6) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        catch {\n            return false;\n        }\n    }\n\n    function checkToJumpDownAgain(value) {\n        try {\n            //left\n            if (counters[squareToMoveTo.height + 1][squareToMoveTo.width - 1] === value) {\n                if (counters[squareToMoveTo.height + 2][squareToMoveTo.width - 2] === 5 || counters[squareToMoveTo.height + 2][squareToMoveTo.width - 2] === 6) {\n                    return true;\n                }\n            }\n\n            //Right\n            if (counters[squareToMoveTo.height + 1][squareToMoveTo.width + 1] === value) {\n                if (counters[squareToMoveTo.height + 2][squareToMoveTo.width + 2] === 5 || counters[squareToMoveTo.height + 2][squareToMoveTo.width + 2] === 6) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        catch {\n            return false;\n        }\n    }\n\n    function checkMoveCounter(value) {\n        if (counterToMove.height + value === squareToMoveTo.height) {\n            if (counterToMove.width - 1 === squareToMoveTo.width || counterToMove.width + 1 === squareToMoveTo.width) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function checkTakeCounter(value, playerToTake) {\n        if (counterToMove.height + value === squareToMoveTo.height) {\n            if (counterToMove.width - 2 === squareToMoveTo.width || counterToMove.width + 2 === squareToMoveTo.width) {\n                let res = (squareToMoveTo.height + counterToMove.height) / 2;\n                let res2 = (squareToMoveTo.width + counterToMove.width) / 2\n                if (counters[res][res2] === playerToTake) {\n                    return {\n                        result: true,\n                        height: res,\n                        width: res2\n                    }\n                }\n            }\n        }\n\n        return {\n            result: false\n        }\n    }\n\n    function undo() {\n        if (listOfMoves.length !== 0) {\n            if (showTips === false) {\n                setShowTips(true);\n            }\n\n            let temp = listOfMoves[listOfMoves.length - 1];\n            for (let i = 0; i < counters.length; i++) {\n                for (let j = 0; j < counters[i].length; j++) {\n                    if (temp.board[i][j] === 6) {\n                        counters[i][j] = 5;\n                    }\n                    else if (counters[i][j] !== temp.board[i][j]) {\n                        counters[i][j] = temp.board[i][j];\n                    }\n                }\n            }\n\n            props.setTurn(temp.turn);\n\n            listOfMoves.pop();\n\n            let piecesTakenPlayer1 = 12 - calculatePiecesTaken(1);\n            props.setPlayer1Counter(piecesTakenPlayer1);\n            let piecesTakenPlayer2 = 12 - calculatePiecesTaken(2);\n            props.setPlayer2Counter(piecesTakenPlayer2);\n\n            setSquares(renderSquares());\n        }\n    }\n\n    function saveBoard() {\n        let copyBoard = [];\n        for (let i = 0; i < counters.length; i++) {\n            copyBoard[i] = counters[i].slice();\n        }\n        setListOfMoves(moves => [...moves, {\n            turn: props.turn,\n            board: copyBoard\n        }]);\n    }\n\n    function calculatePiecesTaken(player) {\n        let counter = 0;\n        for (let i = 0; i < counters.length; i++) {\n            for (let j = 0; j < counters[i].length; j++) {\n                if (counters[i][j] === player || counters[i][j] === player + 2) {\n                    counter++;\n                }\n            }\n        }\n\n        return counter\n    }\n\n    useEffect(() => {\n        if (counterToMove != null && squareToMoveTo != null) {\n            //Player1 \n            if (props.turn === true) {\n                if (counterToMove.state === 1) {\n                    let canTake = checkTakeCounter(-2, 2);\n                    if (canTake.result) {\n                        saveBoard();\n                        takeCounter(canTake.height, canTake.width);\n                        if (checkToJumpUpAgain(2)) {\n                            setShowJumpModal(true);\n                        }\n                    }\n                    else if (checkMoveCounter(-1)) {\n                        saveBoard();\n                        moveCounter();\n                    }\n                }\n            }\n            //Player 2\n            if (props.turn === false) {\n                if (counterToMove.state === 2) {\n                    let canTake = checkTakeCounter(2, 1);\n                    if (canTake.result) {\n                        saveBoard();\n                        takeCounter(canTake.height, canTake.width);\n                        if (checkToJumpUpAgain(1)) {\n                            setShowJumpModal(true);\n                        }\n                    }\n                    else if (checkMoveCounter(1)) {\n                        saveBoard();\n                        moveCounter();\n                    }\n\n                }\n            }\n            //Player 1 or 2 king\n            if (counterToMove.state === 3 || counterToMove.state === 4) {\n                if (counterToMove.height - 1 === squareToMoveTo.height || counterToMove.height + 1 === squareToMoveTo.height) {\n                    if (counterToMove.width - 1 === squareToMoveTo.width || counterToMove.width + 1 === squareToMoveTo.width) {\n                        if ((counterToMove.state === 3 && props.turn === true) || (counterToMove.state === 4 && props.turn === false)) {\n                            saveBoard();\n                            moveCounter();\n                        }\n                    }\n                }\n                else if (counterToMove.height - 2 === squareToMoveTo.height || counterToMove.height + 2 === squareToMoveTo.height) {\n                    if (counterToMove.width - 2 === squareToMoveTo.width || counterToMove.width + 2 === squareToMoveTo.width) {\n                        let res = (squareToMoveTo.height + counterToMove.height) / 2;\n                        let res2 = (squareToMoveTo.width + counterToMove.width) / 2;\n                        //Player 1 king takes player 2\n                        if (props.turn === true) {\n                            if (counterToMove.state === 3 && (counters[res][res2] === 2 || counters[res][res2] === 4)) {\n                                saveBoard();\n                                takeCounter(res, res2);\n                                if (checkToJumpUpAgain(2) || checkToJumpUpAgain(4) || checkToJumpDownAgain(2) || checkToJumpDownAgain(4)) {\n                                    setShowJumpModal(true);\n                                }\n                            }\n                        }\n                        //Player 2 king takes player 1\n                        else if (props.turn === false) {\n                            if (counterToMove.state === 4 && (counters[res][res2] === 1 || counters[res][res2] === 3)) {\n                                saveBoard();\n                                takeCounter(res, res2);\n                                if (checkToJumpUpAgain(1) || checkToJumpUpAgain(3) || checkToJumpDownAgain(1) || checkToJumpDownAgain(3)) {\n                                    setShowJumpModal(true);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            \n            clearTips();\n            setShowTips(true);\n            setCounterToMove(null);\n            setSquareToMoveTo(null);\n            noOneCanMoveCheck();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [squareToMoveTo, counterToMove, counters])\n\n    useEffect(() => {\n        if (JumpModalValue) {\n            props.setTurn(!props.turn);\n            setJumpModalValue(false);\n        }\n    }, [JumpModalValue, props])\n\n    return (\n        <div className=\"container fluid\">\n\n            <div className=\"d-flex justify-content-center mb-3\">\n                <h2>2 Player Mode</h2>\n            </div>\n\n            <ButtonToolbar className=\"d-flex justify-content-center\">\n                <ButtonGroup className=\"ml-2 mr-2 mb-4\">\n                    <Button onClick={showPlayerTips} size=\"lg\">{tipButtonText}</Button>\n                </ButtonGroup>\n                <ButtonGroup className=\"ml-2 mr-2 mb-4\">\n                    <Button onClick={undo} size=\"lg\">Undo</Button>\n                </ButtonGroup>\n            </ButtonToolbar>\n\n            <JumpModal show={showJumpModal} update={setShowJumpModal} setJumpModalValue={setJumpModalValue} />\n\n            <div className=\"d-flex justify-content-center\">\n                <table className=\"gameBorder\">\n                    <tbody className=\"border border-dark\">\n                        {squares}\n                    </tbody>\n                </table>\n            </div>\n        </div>\n    )\n}","export {\n    checkMoveUpLeft,\n    pickMoveForPlayer2\n}\n\nclass Tree {\n    constructor(value) {\n        this.Value = value;\n        this.Left = null;\n        this.Right = null;\n    }\n\n    static treeToArray(mainTree) {\n        function iter(tree, tempArray) {\n            if (tree.Left != null && tree.Right != null) {\n                return iter(tree.Left, tempArray.concat(tree.Value)) + iter(tree.Right, tempArray.concat(tree.Value));\n            }\n            else if (tree.Left != null) {\n                return iter(tree.Left, tempArray.concat(tree.Value))\n            }\n            else if (tree.Right != null) {\n                return iter(tree.Right, tempArray.concat(tree.Value))\n            }\n            else {\n                result.push(tempArray.concat(tree.Value));\n            }\n        }\n\n        let result = [];\n        iter(mainTree, []);\n        return result;\n    }\n}\n\nclass KingTree {\n    constructor(value) {\n        this.Value = value;\n        this.DownLeft = null;\n        this.DownRight = null;\n        this.UpLeft = null;\n        this.UpRight = null;\n    }\n\n    static kingTreeToArray(mainTree) {\n        function iter(tree, tempArray) {\n            if (tree.DownLeft != null && tree.DownRight != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null && tree.UpLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownRight != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownRight != null && tree.UpLeft != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value))\n            }\n            else if (tree.DownRight != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value))\n            }\n            else if (tree.UpLeft != null) {\n                return iter(tree.UpLeft, tempArray.concat(tree.Value))\n            }\n            else if (tree.UpRight != null) {\n                return iter(tree.UpRight, tempArray.concat(tree.Value))\n            }\n            else {\n                result.push(tempArray.concat(tree.Value));\n            }\n        }\n\n        let result = [];\n        iter(mainTree, []);\n        return result;\n    }\n}\n\nfunction checkMoveUpLeft(board, i, j) {\n    try {\n        if (board[i - 1][j - 1] === 5 || board[i - 1][j - 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveUpRight(board, i, j) {\n    try {\n        if (board[i - 1][j + 1] === 5 || board[i - 1][j + 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveDownLeft(board, i, j) {\n    try {\n        if (board[i + 1][j - 1] === 5 || board[i + 1][j - 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveDownRight(board, i, j) {\n    try {\n        if (board[i + 1][j + 1] === 5 || board[i + 1][j + 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction factoryForMove(height, width, moveHeight, moveWidth) {\n    return {\n        currentHeight: height,\n        currentWidth: width,\n        nextHeight: moveHeight,\n        nextWidth: moveWidth,\n        takes: []\n    }\n}\n\nfunction FindAvailableMoves(board) {\n    let results = [];\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j]\n            if (piece === 2) {\n                if (checkMoveDownLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j - 1));\n                }\n                if (checkMoveDownRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j + 1));\n                }\n            }\n            else if (piece === 4) {\n                if (checkMoveDownLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j - 1));\n                }\n                if (checkMoveDownRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j + 1));\n                }\n                if (checkMoveUpLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j - 1));\n                }\n                if (checkMoveUpRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j + 1));\n                }\n            }\n        }\n    }\n\n    return results;\n}\n\nfunction factoryForTakeMove(takeHeight, takeWidth, nextHeight, nextWidth) {\n    return {\n        takeHeight: takeHeight,\n        takeWidth: takeWidth,\n        nextHeight: nextHeight,\n        nextWidth: nextWidth\n    }\n}\n\nfunction checkTakeDown(board, i, j, playerToTake, tree) {\n    try {\n        //left\n        if (playerToTake.includes(board[i + 1][j - 1])) {\n            if (board[i + 2][j - 2] === 5 || board[i + 2][j - 2] === 6) {\n                tree.Left = new Tree(factoryForTakeMove(i + 1, j - 1, i + 2, j - 2));\n                checkTakeDown(board, i + 2, j - 2, playerToTake, tree.Left);\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Right\n        if (playerToTake.includes(board[i + 1][j + 1])) {\n            if (board[i + 2][j + 2] === 5 || board[i + 2][j + 2] === 6) {\n                tree.Right = new Tree(factoryForTakeMove(i + 1, j + 1, i + 2, j + 2));\n                checkTakeDown(board, i + 2, j + 2, playerToTake, tree.Right);\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction checkKingTake(board, i, j, i2, j2, playerToTake, tree) {\n    try {\n        //Down left\n        if (playerToTake.includes(board[i2 + 1][j2 - 1])) {\n            if (board[i2 + 2][j2 - 2] === 5 || board[i2 + 2][j2 - 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 - 2) {\n                    tree.DownLeft = new Tree(factoryForTakeMove(i2 + 1, j2 - 1, i2 + 2, j2 - 2));\n                    checkKingTake(board, i2, j2, i2 + 2, j2 - 2, playerToTake, tree.DownLeft);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Down Right\n        if (playerToTake.includes(board[i2 + 1][j2 + 1])) {\n            if (board[i2 + 2][j2 + 2] === 5 || board[i2 + 2][j2 + 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 + 2) {\n                    tree.DownRight = new Tree(factoryForTakeMove(i2 + 1, j2 + 1, i2 + 2, j2 + 2));\n                    checkKingTake(board, i2, j2, i2 + 2, j2 + 2, playerToTake, tree.DownRight);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up left\n        if (playerToTake.includes(board[i2 - 1][j2 - 1])) {\n            if (board[i2 - 2][j2 - 2] === 5 || board[i2 - 2][j2 - 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 - 2) {\n                    tree.UpLeft = new Tree(factoryForTakeMove(i2 - 1, j2 - 1, i2 - 2, j2 - 2));\n                    checkKingTake(board, i2, j2, i2 - 2, j2 - 2, playerToTake, tree.UpLeft);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up Right\n        if (playerToTake.includes(board[i2 - 1][j2 + 1])) {\n            if (board[i2 - 2][j2 + 2] === 5 || board[i2 - 2][j2 + 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 + 2) {\n                    tree.UpRight = new Tree(factoryForTakeMove(i2 - 1, j2 + 1, i2 - 2, j2 + 2));\n                    checkKingTake(board, i2, j2, i2 - 2, j2 + 2, playerToTake, tree.UpRight);\n                }\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction FindAvailableTakeMoves(board) {\n    let res = [];\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j]\n            if (piece === 2) {\n                let resultTree = checkTakeDown(board, i, j, [1], new Tree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.Left != null || resultTree.Right != null) {\n                    let treeArray = Tree.treeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n            else if (piece === 4) {\n                let resultTree = checkKingTake(board, i, j, i, j, [1, 3], new KingTree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.DownLeft != null || resultTree.DownRight != null || resultTree.UpLeft != null || resultTree.UpRight != null) {\n                    let treeArray = KingTree.kingTreeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n        }\n    }\n\n    return res;\n}\n\nfunction pickMoveForPlayer2(board) {\n    let takeMoves = FindAvailableTakeMoves(board);\n    if (takeMoves.length !== 0) {\n        let randomNumber = Math.floor((Math.random() * takeMoves.length));\n        let takeMove = takeMoves[randomNumber];\n        let takes = [];\n        for (let index = 1; index < takeMove.length; index++) {\n            const element = takeMove[index];\n            takes.push({\n                height: element.takeHeight,\n                width: element.takeWidth\n            })\n        }\n        return {\n            currentHeight: takeMove[0].currentHeight,\n            currentWidth: takeMove[0].currentWidth,\n            nextHeight: takeMove[takeMove.length - 1].nextHeight,\n            nextWidth: takeMove[takeMove.length - 1].nextWidth,\n            takes: takes\n        };\n    }\n\n    let moves = FindAvailableMoves(board)\n    if (moves.length !== 0) {\n        let randomNumber = Math.floor((Math.random() * moves.length));\n        return (moves[randomNumber]);\n    }\n}\n\n\n","export {\n    minimax,\n    evaluate,\n    GetAvailableBoards,\n    FindAvailableTakeMoves,\n    checkKingTake,\n    checkTakeUp,\n    checkTakeDown,\n    FindAvailableMoves,\n    checkMoveDownRight,\n    checkMoveDownLeft,\n    checkMoveUpRight,\n    checkMoveUpLeft\n}\n\nclass Tree {\n    constructor(value) {\n        this.Value = value;\n        this.Left = null;\n        this.Right = null;\n    }\n\n    static treeToArray(mainTree) {\n        function iter(tree, tempArray) {\n            if (tree.Left != null && tree.Right != null) {\n                return iter(tree.Left, tempArray.concat(tree.Value)) + iter(tree.Right, tempArray.concat(tree.Value));\n            }\n            else if (tree.Left != null) {\n                return iter(tree.Left, tempArray.concat(tree.Value))\n            }\n            else if (tree.Right != null) {\n                return iter(tree.Right, tempArray.concat(tree.Value))\n            }\n            else {\n                result.push(tempArray.concat(tree.Value));\n            }\n        }\n\n        let result = [];\n        iter(mainTree, []);\n        return result;\n    }\n}\n\nclass KingTree {\n    constructor(value) {\n        this.Value = value;\n        this.DownLeft = null;\n        this.DownRight = null;\n        this.UpLeft = null;\n        this.UpRight = null;\n    }\n\n    static kingTreeToArray(mainTree) {\n        function iter(tree, tempArray) {\n            if (tree.DownLeft != null && tree.DownRight != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null && tree.UpLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownRight != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownRight != null && tree.UpLeft != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value))\n            }\n            else if (tree.DownRight != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value))\n            }\n            else if (tree.UpLeft != null) {\n                return iter(tree.UpLeft, tempArray.concat(tree.Value))\n            }\n            else if (tree.UpRight != null) {\n                return iter(tree.UpRight, tempArray.concat(tree.Value))\n            }\n            else {\n                result.push(tempArray.concat(tree.Value));\n            }\n        }\n\n        let result = [];\n        iter(mainTree, []);\n        return result;\n    }\n}\n\nfunction checkMoveUpLeft(board, i, j) {\n    try {\n        if (board[i - 1][j - 1] === 5 || board[i - 1][j - 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveUpRight(board, i, j) {\n    try {\n        if (board[i - 1][j + 1] === 5 || board[i - 1][j + 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveDownLeft(board, i, j) {\n    try {\n        if (board[i + 1][j - 1] === 5 || board[i + 1][j - 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveDownRight(board, i, j) {\n    try {\n        if (board[i + 1][j + 1] === 5 || board[i + 1][j + 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction factoryForMove(height, width, moveHeight, moveWidth) {\n    return {\n        currentHeight: height,\n        currentWidth: width,\n        nextHeight: moveHeight,\n        nextWidth: moveWidth,\n        takes: []\n    }\n}\n\nfunction FindAvailableMoves(board, player) {\n    let results = [];\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j]\n            if (piece === 1 && player === 1) {\n                if (checkMoveUpLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j - 1));\n                }\n                if (checkMoveUpRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j + 1));\n                }\n            }\n            else if (piece === 2 && player === 2) {\n                if (checkMoveDownLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j - 1));\n                }\n                if (checkMoveDownRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j + 1));\n                }\n            }\n            else if ((piece === 3 && player === 1) || (piece === 4 && player === 2)) {\n                if (checkMoveDownLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j - 1));\n                }\n                if (checkMoveDownRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j + 1));\n                }\n                if (checkMoveUpLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j - 1));\n                }\n                if (checkMoveUpRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j + 1));\n                }\n            }\n        }\n    }\n\n    return results;\n}\n\nfunction factoryForTakeMove(takeHeight, takeWidth, nextHeight, nextWidth) {\n    return {\n        takeHeight: takeHeight,\n        takeWidth: takeWidth,\n        nextHeight: nextHeight,\n        nextWidth: nextWidth\n    }\n}\n\nfunction checkTakeDown(board, i, j, playerToTake, tree) {\n    try {\n        //left\n        if (playerToTake.includes(board[i + 1][j - 1])) {\n            if (board[i + 2][j - 2] === 5 || board[i + 2][j - 2] === 6) {\n                tree.Left = new Tree(factoryForTakeMove(i + 1, j - 1, i + 2, j - 2));\n                checkTakeDown(board, i + 2, j - 2, playerToTake, tree.Left);\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Right\n        if (playerToTake.includes(board[i + 1][j + 1])) {\n            if (board[i + 2][j + 2] === 5 || board[i + 2][j + 2] === 6) {\n                tree.Right = new Tree(factoryForTakeMove(i + 1, j + 1, i + 2, j + 2));\n                checkTakeDown(board, i + 2, j + 2, playerToTake, tree.Right);\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction checkTakeUp(board, i, j, playerToTake, tree) {\n    try {\n        //left\n        if (playerToTake.includes(board[i - 1][j - 1])) {\n            if (board[i - 2][j - 2] === 5 || board[i - 2][j - 2] === 6) {\n                tree.Left = new Tree(factoryForTakeMove(i - 1, j - 1, i - 2, j - 2));\n                checkTakeUp(board, i - 2, j - 2, playerToTake, tree.Left);\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Right\n        if (playerToTake.includes(board[i - 1][j + 1])) {\n            if (board[i - 2][j + 2] === 5 || board[i - 2][j + 2] === 6) {\n                tree.Right = new Tree(factoryForTakeMove(i - 1, j + 1, i - 2, j + 2));\n                checkTakeUp(board, i - 2, j + 2, playerToTake, tree.Right);\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction checkKingTake(board, i, j, i2, j2, playerToTake, tree) {\n    try {\n        //Down left\n        if (playerToTake.includes(board[i2 + 1][j2 - 1])) {\n            if (board[i2 + 2][j2 - 2] === 5 || board[i2 + 2][j2 - 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 - 2) {\n                    tree.DownLeft = new Tree(factoryForTakeMove(i2 + 1, j2 - 1, i2 + 2, j2 - 2));\n                    checkKingTake(board, i2, j2, i2 + 2, j2 - 2, playerToTake, tree.DownLeft);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Down Right\n        if (playerToTake.includes(board[i2 + 1][j2 + 1])) {\n            if (board[i2 + 2][j2 + 2] === 5 || board[i2 + 2][j2 + 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 + 2) {\n                    tree.DownRight = new Tree(factoryForTakeMove(i2 + 1, j2 + 1, i2 + 2, j2 + 2));\n                    checkKingTake(board, i2, j2, i2 + 2, j2 + 2, playerToTake, tree.DownRight);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up left\n        if (playerToTake.includes(board[i2 - 1][j2 - 1])) {\n            if (board[i2 - 2][j2 - 2] === 5 || board[i2 - 2][j2 - 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 - 2) {\n                    tree.UpLeft = new Tree(factoryForTakeMove(i2 - 1, j2 - 1, i2 - 2, j2 - 2));\n                    checkKingTake(board, i2, j2, i2 - 2, j2 - 2, playerToTake, tree.UpLeft);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up Right\n        if (playerToTake.includes(board[i2 - 1][j2 + 1])) {\n            if (board[i2 - 2][j2 + 2] === 5 || board[i2 - 2][j2 + 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 + 2) {\n                    tree.UpRight = new Tree(factoryForTakeMove(i2 - 1, j2 + 1, i2 - 2, j2 + 2));\n                    checkKingTake(board, i2, j2, i2 - 2, j2 + 2, playerToTake, tree.UpRight);\n                }\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction FindAvailableTakeMoves(board, player) {\n    let res = [];\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j]\n            if (piece === 1 && player === 1) {\n                let resultTree = checkTakeUp(board, i, j, [2], new Tree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.Left != null || resultTree.Right != null) {\n                    let treeArray = Tree.treeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n            else if (piece === 2 && player === 2) {\n                let resultTree = checkTakeDown(board, i, j, [1], new Tree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.Left != null || resultTree.Right != null) {\n                    let treeArray = Tree.treeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n            else if (piece === 3 && player === 1) {\n                let resultTree = checkKingTake(board, i, j, i, j, [2, 4], new KingTree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.DownLeft != null || resultTree.DownRight != null || resultTree.UpLeft != null || resultTree.UpRight != null) {\n                    let treeArray = KingTree.kingTreeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n            else if (piece === 4 && player === 2) {\n                let resultTree = checkKingTake(board, i, j, i, j, [1, 3], new KingTree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.DownLeft != null || resultTree.DownRight != null || resultTree.UpLeft != null || resultTree.UpRight != null) {\n                    let treeArray = KingTree.kingTreeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n        }\n    }\n\n    return res;\n}\n\nfunction GetAvailableBoards(board, player) {\n    let boardInfos = [];\n    let takeMoves = FindAvailableTakeMoves(board, player);\n\n    takeMoves.forEach(takeMove => {\n        let tempBoard = [];\n        for (let i = 0; i < board.length; i++) {\n            tempBoard[i] = board[i].slice();\n        }\n\n        let takes = [];\n        takeMove.slice(1).forEach(take => {\n            tempBoard[take.takeHeight][take.takeWidth] = 5;\n            takes.push({\n                height: take.takeHeight,\n                width: take.takeWidth\n            })\n        });\n\n        let tempValue = tempBoard[takeMove[0].currentHeight][takeMove[0].currentWidth];\n        tempBoard[takeMove[0].currentHeight][takeMove[0].currentWidth] = 5;\n        tempBoard[takeMove[takeMove.length - 1].nextHeight][takeMove[takeMove.length - 1].nextWidth] = tempValue;\n\n        boardInfos.push({\n            board: tempBoard,\n            currentHeight: takeMove[0].currentHeight,\n            currentWidth: takeMove[0].currentWidth,\n            nextHeight: takeMove[takeMove.length - 1].nextHeight,\n            nextWidth: takeMove[takeMove.length - 1].nextWidth,\n            takes: takes\n        });\n    });\n\n    let moves = FindAvailableMoves(board, player);\n    moves.forEach(move => {\n        let tempBoard = [];\n        for (let i = 0; i < board.length; i++) {\n            tempBoard[i] = board[i].slice();\n        }\n\n        let tempValue = tempBoard[move.currentHeight][move.currentWidth];\n        tempBoard[move.currentHeight][move.currentWidth] = 5;\n        tempBoard[move.nextHeight][move.nextWidth] = tempValue;\n\n        boardInfos.push({\n            board: tempBoard,\n            currentHeight: move.currentHeight,\n            currentWidth: move.currentWidth,\n            nextHeight: move.nextHeight,\n            nextWidth: move.nextWidth,\n            takes: move.takes\n        });\n    })\n\n    return boardInfos;\n}\n\nfunction evaluate(board) {\n    let player1Counter = 0;\n    let player2Counter = 0;\n\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === 1) {\n                player1Counter = player1Counter + 1;\n            }\n            else if (board[i][j] === 2) {\n                player2Counter = player2Counter + 1;\n            }\n            else if (board[i][j] === 3) {\n                player1Counter = player1Counter + 2;\n            }\n            else if (board[i][j] === 4) {\n                player2Counter = player2Counter + 2;\n            }\n        }\n    }\n    return player2Counter - player1Counter;\n}\n\n\nfunction minimax(board, depth, minOrMax) {\n    if (depth === 0) {\n        return [evaluate(board), board];\n    }\n\n    if (minOrMax) {\n        let maxEval = -1000;\n        let bestMove = null;\n        let player2MovesBoards = GetAvailableBoards(board, 2);\n        player2MovesBoards.forEach(boardInfo => {\n            let evaluation = minimax(boardInfo.board, depth - 1, false)[0];\n            maxEval = Math.max(maxEval, evaluation);\n            if (maxEval === evaluation) {\n                bestMove = boardInfo;\n            }\n        });\n\n        return [maxEval, bestMove];\n    }\n    else {\n        let minEval = 1000;\n        let bestMove = null;\n        let player1MovesBoards = GetAvailableBoards(board, 1);\n        player1MovesBoards.forEach(boardInfo => {\n            let evaluation = minimax(boardInfo.board, depth - 1, true)[0];\n            minEval = Math.min(minEval, evaluation);\n            if (minEval === evaluation) {\n                bestMove = boardInfo;\n            }\n        });\n\n        return [minEval, bestMove];\n    }\n}\n\n","export {\n    minimax,\n    evaluate,\n    GetAvailableBoards,\n    FindAvailableTakeMoves,\n    checkKingTake,\n    checkTakeUp,\n    checkTakeDown,\n    FindAvailableMoves,\n    checkMoveDownRight,\n    checkMoveDownLeft,\n    checkMoveUpRight,\n    checkMoveUpLeft\n}\n\nclass Tree {\n    constructor(value) {\n        this.Value = value;\n        this.Left = null;\n        this.Right = null;\n    }\n\n    static treeToArray(mainTree) {\n        function iter(tree, tempArray) {\n            if (tree.Left != null && tree.Right != null) {\n                return iter(tree.Left, tempArray.concat(tree.Value)) + iter(tree.Right, tempArray.concat(tree.Value));\n            }\n            else if (tree.Left != null) {\n                return iter(tree.Left, tempArray.concat(tree.Value))\n            }\n            else if (tree.Right != null) {\n                return iter(tree.Right, tempArray.concat(tree.Value))\n            }\n            else {\n                result.push(tempArray.concat(tree.Value));\n            }\n        }\n\n        let result = [];\n        iter(mainTree, []);\n        return result;\n    }\n}\n\nclass KingTree {\n    constructor(value) {\n        this.Value = value;\n        this.DownLeft = null;\n        this.DownRight = null;\n        this.UpLeft = null;\n        this.UpRight = null;\n    }\n\n    static kingTreeToArray(mainTree) {\n        function iter(tree, tempArray) {\n            if (tree.DownLeft != null && tree.DownRight != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null && tree.UpLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownRight != null && tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.DownRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.DownRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownRight != null && tree.UpLeft != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value)) + iter(tree.UpLeft, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null && tree.UpRight != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.UpLeft != null && tree.UpRight != null) {\n                return iter(tree.UpLeft, tempArray.concat(tree.Value)) + iter(tree.UpRight, tempArray.concat(tree.Value));\n            }\n            else if (tree.DownLeft != null) {\n                return iter(tree.DownLeft, tempArray.concat(tree.Value))\n            }\n            else if (tree.DownRight != null) {\n                return iter(tree.DownRight, tempArray.concat(tree.Value))\n            }\n            else if (tree.UpLeft != null) {\n                return iter(tree.UpLeft, tempArray.concat(tree.Value))\n            }\n            else if (tree.UpRight != null) {\n                return iter(tree.UpRight, tempArray.concat(tree.Value))\n            }\n            else {\n                result.push(tempArray.concat(tree.Value));\n            }\n        }\n\n        let result = [];\n        iter(mainTree, []);\n        return result;\n    }\n}\n\nfunction checkMoveUpLeft(board, i, j) {\n    try {\n        if (board[i - 1][j - 1] === 5 || board[i - 1][j - 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveUpRight(board, i, j) {\n    try {\n        if (board[i - 1][j + 1] === 5 || board[i - 1][j + 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveDownLeft(board, i, j) {\n    try {\n        if (board[i + 1][j - 1] === 5 || board[i + 1][j - 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction checkMoveDownRight(board, i, j) {\n    try {\n        if (board[i + 1][j + 1] === 5 || board[i + 1][j + 1] === 6) {\n            return true;\n        }\n\n        return false;\n    }\n    catch { return false; }\n}\n\nfunction factoryForMove(height, width, moveHeight, moveWidth) {\n    return {\n        currentHeight: height,\n        currentWidth: width,\n        nextHeight: moveHeight,\n        nextWidth: moveWidth,\n        takes: []\n    }\n}\n\nfunction FindAvailableMoves(board, player) {\n    let results = [];\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j]\n            if (piece === 1 && player === 1) {\n                if (checkMoveUpLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j - 1));\n                }\n                if (checkMoveUpRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j + 1));\n                }\n            }\n            else if (piece === 2 && player === 2) {\n                if (checkMoveDownLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j - 1));\n                }\n                if (checkMoveDownRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j + 1));\n                }\n            }\n            else if ((piece === 3 && player === 1) || (piece === 4 && player === 2)) {\n                if (checkMoveDownLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j - 1));\n                }\n                if (checkMoveDownRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i + 1, j + 1));\n                }\n                if (checkMoveUpLeft(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j - 1));\n                }\n                if (checkMoveUpRight(board, i, j)) {\n                    results.push(factoryForMove(i, j, i - 1, j + 1));\n                }\n            }\n        }\n    }\n\n    return results;\n}\n\nfunction factoryForTakeMove(takeHeight, takeWidth, nextHeight, nextWidth) {\n    return {\n        takeHeight: takeHeight,\n        takeWidth: takeWidth,\n        nextHeight: nextHeight,\n        nextWidth: nextWidth\n    }\n}\n\nfunction checkTakeDown(board, i, j, playerToTake, tree) {\n    try {\n        //left\n        if (playerToTake.includes(board[i + 1][j - 1])) {\n            if (board[i + 2][j - 2] === 5 || board[i + 2][j - 2] === 6) {\n                tree.Left = new Tree(factoryForTakeMove(i + 1, j - 1, i + 2, j - 2));\n                checkTakeDown(board, i + 2, j - 2, playerToTake, tree.Left);\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Right\n        if (playerToTake.includes(board[i + 1][j + 1])) {\n            if (board[i + 2][j + 2] === 5 || board[i + 2][j + 2] === 6) {\n                tree.Right = new Tree(factoryForTakeMove(i + 1, j + 1, i + 2, j + 2));\n                checkTakeDown(board, i + 2, j + 2, playerToTake, tree.Right);\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction checkTakeUp(board, i, j, playerToTake, tree) {\n    try {\n        //left\n        if (playerToTake.includes(board[i - 1][j - 1])) {\n            if (board[i - 2][j - 2] === 5 || board[i - 2][j - 2] === 6) {\n                tree.Left = new Tree(factoryForTakeMove(i - 1, j - 1, i - 2, j - 2));\n                checkTakeUp(board, i - 2, j - 2, playerToTake, tree.Left);\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Right\n        if (playerToTake.includes(board[i - 1][j + 1])) {\n            if (board[i - 2][j + 2] === 5 || board[i - 2][j + 2] === 6) {\n                tree.Right = new Tree(factoryForTakeMove(i - 1, j + 1, i - 2, j + 2));\n                checkTakeUp(board, i - 2, j + 2, playerToTake, tree.Right);\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction checkKingTake(board, i, j, i2, j2, playerToTake, tree) {\n    try {\n        //Down left\n        if (playerToTake.includes(board[i2 + 1][j2 - 1])) {\n            if (board[i2 + 2][j2 - 2] === 5 || board[i2 + 2][j2 - 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 - 2) {\n                    tree.DownLeft = new Tree(factoryForTakeMove(i2 + 1, j2 - 1, i2 + 2, j2 - 2));\n                    checkKingTake(board, i2, j2, i2 + 2, j2 - 2, playerToTake, tree.DownLeft);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Down Right\n        if (playerToTake.includes(board[i2 + 1][j2 + 1])) {\n            if (board[i2 + 2][j2 + 2] === 5 || board[i2 + 2][j2 + 2] === 6) {\n                if (i !== i2 + 2 || j !== j2 + 2) {\n                    tree.DownRight = new Tree(factoryForTakeMove(i2 + 1, j2 + 1, i2 + 2, j2 + 2));\n                    checkKingTake(board, i2, j2, i2 + 2, j2 + 2, playerToTake, tree.DownRight);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up left\n        if (playerToTake.includes(board[i2 - 1][j2 - 1])) {\n            if (board[i2 - 2][j2 - 2] === 5 || board[i2 - 2][j2 - 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 - 2) {\n                    tree.UpLeft = new Tree(factoryForTakeMove(i2 - 1, j2 - 1, i2 - 2, j2 - 2));\n                    checkKingTake(board, i2, j2, i2 - 2, j2 - 2, playerToTake, tree.UpLeft);\n                }\n            }\n        }\n    }\n    catch { }\n\n    try {\n        //Up Right\n        if (playerToTake.includes(board[i2 - 1][j2 + 1])) {\n            if (board[i2 - 2][j2 + 2] === 5 || board[i2 - 2][j2 + 2] === 6) {\n                if (i !== i2 - 2 || j !== j2 + 2) {\n                    tree.UpRight = new Tree(factoryForTakeMove(i2 - 1, j2 + 1, i2 - 2, j2 + 2));\n                    checkKingTake(board, i2, j2, i2 - 2, j2 + 2, playerToTake, tree.UpRight);\n                }\n            }\n        }\n    }\n    catch { }\n\n    return tree;\n}\n\nfunction FindAvailableTakeMoves(board, player) {\n    let res = [];\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            let piece = board[i][j]\n            if (piece === 1 && player === 1) {\n                let resultTree = checkTakeUp(board, i, j, [2], new Tree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.Left != null || resultTree.Right != null) {\n                    let treeArray = Tree.treeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n            else if (piece === 2 && player === 2) {\n                let resultTree = checkTakeDown(board, i, j, [1], new Tree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.Left != null || resultTree.Right != null) {\n                    let treeArray = Tree.treeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n            else if (piece === 3 && player === 1) {\n                let resultTree = checkKingTake(board, i, j, i, j, [2, 4], new KingTree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.DownLeft != null || resultTree.DownRight != null || resultTree.UpLeft != null || resultTree.UpRight != null) {\n                    let treeArray = KingTree.kingTreeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n            else if (piece === 4 && player === 2) {\n                let resultTree = checkKingTake(board, i, j, i, j, [1, 3], new KingTree({ currentHeight: i, currentWidth: j }));\n                if (resultTree.DownLeft != null || resultTree.DownRight != null || resultTree.UpLeft != null || resultTree.UpRight != null) {\n                    let treeArray = KingTree.kingTreeToArray(resultTree);\n                    treeArray.forEach(element => {\n                        res.push(element);\n                    });\n                }\n            }\n        }\n    }\n\n    return res;\n}\n\n\nfunction GetAvailableBoards(board, player) {\n    let boardInfos = [];\n    let takeMoves = FindAvailableTakeMoves(board, player);\n\n    takeMoves.forEach(takeMove => {\n        let tempBoard = [];\n        for (let i = 0; i < board.length; i++) {\n            tempBoard[i] = board[i].slice();\n        }\n\n        let takes = [];\n        takeMove.slice(1).forEach(take => {\n            tempBoard[take.takeHeight][take.takeWidth] = 5;\n            takes.push({\n                height: take.takeHeight,\n                width: take.takeWidth\n            })\n        });\n\n        let tempValue = tempBoard[takeMove[0].currentHeight][takeMove[0].currentWidth];\n        tempBoard[takeMove[0].currentHeight][takeMove[0].currentWidth] = 5;\n        tempBoard[takeMove[takeMove.length - 1].nextHeight][takeMove[takeMove.length - 1].nextWidth] = tempValue;\n\n        boardInfos.push({\n            board: tempBoard,\n            currentHeight: takeMove[0].currentHeight,\n            currentWidth: takeMove[0].currentWidth,\n            nextHeight: takeMove[takeMove.length - 1].nextHeight,\n            nextWidth: takeMove[takeMove.length - 1].nextWidth,\n            takes: takes\n        });\n    });\n\n    let moves = FindAvailableMoves(board, player);\n    moves.forEach(move => {\n        let tempBoard = [];\n        for (let i = 0; i < board.length; i++) {\n            tempBoard[i] = board[i].slice();\n        }\n\n        let tempValue = tempBoard[move.currentHeight][move.currentWidth];\n        tempBoard[move.currentHeight][move.currentWidth] = 5;\n        tempBoard[move.nextHeight][move.nextWidth] = tempValue;\n\n        boardInfos.push({\n            board: tempBoard,\n            currentHeight: move.currentHeight,\n            currentWidth: move.currentWidth,\n            nextHeight: move.nextHeight,\n            nextWidth: move.nextWidth,\n            takes: move.takes\n        });\n    })\n\n    return boardInfos;\n}\n\nfunction evaluate(board) {\n    let player1Counter = 0;\n    let player2Counter = 0;\n    let player1TakeMoves = GetPiecesTaken(FindAvailableTakeMoves(board, 1));\n    let player2TakeMoves = GetPiecesTaken(FindAvailableTakeMoves(board, 2));\n\n    // 1 point: If the king can be taken\n    // 2 points: If the single piece can be taken\n    // 3 points: If the single piece cant be taken\n    // 4 points: If king can't be taken\n    for (let i = 0; i < board.length; i++) {\n        for (let j = 0; j < board[i].length; j++) {\n            if (board[i][j] === 1) {\n                if (CanPieceBeTaken(player2TakeMoves, i, j)) {\n                    player1Counter = player1Counter + 2;\n                }\n                else {\n                    player1Counter = player1Counter + 3;\n                }\n            }\n            else if (board[i][j] === 2) {\n                if (CanPieceBeTaken(player1TakeMoves, i, j)) {\n                    player2Counter = player2Counter + 2;\n                }\n                else {\n                    player2Counter = player2Counter + 3;\n                }\n            }\n            else if (board[i][j] === 3) {\n                if (CanPieceBeTaken(player2TakeMoves, i, j)) {\n                    player1Counter = player1Counter + 1;\n                }\n                else {\n                    player1Counter = player1Counter + 4;\n                }\n            }\n            else if (board[i][j] === 4) {\n                if (CanPieceBeTaken(player1TakeMoves, i, j)) {\n                    player2Counter = player2Counter + 1;\n                }\n                else {\n                    player2Counter = player2Counter + 4;\n                }\n            }\n        }\n    }\n    \n    return player2Counter - player1Counter;\n}\n\nfunction GetPiecesTaken(takeMoves) {\n    let results = [];\n\n    takeMoves.forEach(takeMove => {\n        takeMove.slice(1).forEach(take => {\n            results.push({\n                height: take.takeHeight,\n                width: take.takeWidth\n            })\n        });\n    });\n\n    return results;\n}\n\nfunction CanPieceBeTaken(takes, height, width) {\n    let result = false;\n    takes.forEach(element => {\n        if (element.height === height && element.width === width) {\n            result = true;\n        }\n    });\n\n    return result;\n}\n\n// function findBiggest(moves) {\n//     let maxValue = -1000;\n//     moves.forEach(element => {\n//         maxValue = Math.max(maxValue, element[0]);\n//     });\n\n//     return maxValue;\n// }\n\n// function findSmallest(moves) {\n//     let minValue = 1000;\n//     moves.forEach(element => {\n//         minValue = Math.min(minValue, element[0]);\n//     });\n\n//     return minValue;\n// }\n\n// function filterMoves(moves, value) {\n//     return moves.filter(move => {\n//         return move[0] === value;\n//     });\n// }\n\n// function minimax(board, depth, minOrMax) {\n//     if (depth === 0) {\n//         return [evaluate(board), board];\n//     }\n\n//     if (minOrMax) {\n//         let moves = [];\n//         let bestMove = [-1000, null];\n//         let player2MovesBoards = GetAvailableBoards(board, 2);\n//         player2MovesBoards.forEach(boardInfo => {\n//             let move = minimax(boardInfo.board, depth - 1, false)[0];\n//             moves.push([move, boardInfo]);\n//         });\n\n//         if (moves.length !== 0) {\n//             let biggestValue = findBiggest(moves);\n//             let biggestMoves = filterMoves(moves, biggestValue);\n//             let randomNumber = Math.floor((Math.random() * biggestMoves.length));\n\n//             bestMove = biggestMoves[randomNumber];\n//         }\n\n//         return bestMove;\n//     }\n//     else {\n//         let moves = [];\n//         let bestMove = [1000, null]\n//         let player1MovesBoards = GetAvailableBoards(board, 1);\n//         player1MovesBoards.forEach(boardInfo => {\n//             let move = minimax(boardInfo.board, depth - 1, true)[0];\n//             moves.push([move, boardInfo]);\n//         });\n\n//         if (moves.length !== 0) {\n//             let smallestValue = findSmallest(moves);\n//             let smallestMoves = filterMoves(moves, smallestValue);\n//             let randomNumber = Math.floor((Math.random() * smallestMoves.length));\n//             bestMove = smallestMoves[randomNumber];\n//         }\n\n//         return bestMove;\n//     }\n// }\n\nfunction minimax(board, depth, minOrMax) {\n    if (depth === 0) {\n        return [evaluate(board), board];\n    }\n\n    if (minOrMax) {\n        let maxEval = -1000;\n        let bestMove = null;\n        let player2MovesBoards = GetAvailableBoards(board, 2);\n        player2MovesBoards.forEach(boardInfo => {\n            let evaluation = minimax(boardInfo.board, depth - 1, false)[0];\n            maxEval = Math.max(maxEval, evaluation);\n            if (maxEval === evaluation) {\n                bestMove = boardInfo;\n            }\n        });\n\n        return [maxEval, bestMove];\n    }\n    else {\n        let minEval = 1000;\n        let bestMove = null;\n        let player1MovesBoards = GetAvailableBoards(board, 1);\n        player1MovesBoards.forEach(boardInfo => {\n            let evaluation = minimax(boardInfo.board, depth - 1, true)[0];\n            minEval = Math.min(minEval, evaluation);\n            if (minEval === evaluation) {\n                bestMove = boardInfo;\n            }\n        });\n\n        return [minEval, bestMove];\n    }\n}\n\n// FOR DEBUG\n// let board = [\n//     [0, 2, 0, 2, 0, 5, 0, 5],\n//     [2, 0, 5, 0, 2, 0, 2, 0],\n//     [0, 2, 0, 2, 0, 2, 0, 2],\n//     [2, 0, 2, 0, 5, 0, 2, 0],\n//     [0, 1, 0, 1, 0, 1, 0, 1],\n//     [1, 0, 1, 0, 1, 0, 1, 0],\n//     [0, 5, 0, 5, 0, 5, 0, 5],\n//     [1, 0, 1, 0, 1, 0, 1, 0]\n// ];\n\n// //let result = minimax(board, 2, true);\n// // //let result = evaluate(board);\n\n// //console.log(result);\n\n","import React, { useState } from \"react\";\n\nexport const MyContext = React.createContext();\n\nexport default function MyProvider(props) {\n  //PC: true\n  //2 Player: False\n  const [pcOr2Player, setPcOr2Player] = useState(null);\n\n  //Not set: 0\n  //Easy: 1\n  //Medium: 2\n  //Hard: 3\n  const [difficulty, setDifficulty] = useState(\"0\")\n\n  const handlePcOr2PlayerChange = (e) => {\n    setPcOr2Player(e.target.value);\n    if (e.target.value === \"false\") {\n      setDifficulty(0)\n    }\n  }\n\n  const handleDifficulty = (e) => {\n    setDifficulty(e.target.value);\n  }\n\n  return (\n    <MyContext.Provider value={{\n      pcOr2Player: pcOr2Player,\n      handlePcOr2PlayerChange: handlePcOr2PlayerChange,\n      difficulty: difficulty,\n      handleDifficulty: handleDifficulty\n\n    }}>\n      {props.children}\n    </MyContext.Provider>\n  )\n}","import React, { useState, useEffect, useContext } from 'react';\nimport Square from './Square';\nimport JumpModal from './JumpModal';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport { findPlayerMoves } from '../../logic/playerTips';\nimport { pickMoveForPlayer2 } from '../../logic/automatedPlayerV1';\nimport { minimax as automatedPlayerV2 } from '../../logic/automatedPlayerV2';\nimport { minimax as automatedPlayerV3 } from '../../logic/automatedPlayerV3';\nimport { MyContext } from '../../store/MyProvider';\n\nexport default function PcBoard(props) {\n    //0 - Counter is never there\n    //1 - Player 1 Counter \n    //2 - Player 2 Counter\n    //3 - Player 1 King Counter\n    //4 - Player 2 King Counter\n    //5 - Playable space\n    //6 - Show player tip\n    const start = [\n        [0, 2, 0, 2, 0, 2, 0, 2],\n        [2, 0, 2, 0, 2, 0, 2, 0],\n        [0, 2, 0, 2, 0, 2, 0, 2],\n        [5, 0, 5, 0, 5, 0, 5, 0],\n        [0, 5, 0, 5, 0, 5, 0, 5],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n        [0, 1, 0, 1, 0, 1, 0, 1],\n        [1, 0, 1, 0, 1, 0, 1, 0],\n    ];\n\n    const [counters, setCounters] = useState(start);\n\n    const [counterToMove, setCounterToMove] = useState(null);\n    const [squareToMoveTo, setSquareToMoveTo] = useState(null);\n\n    const [showTips, setShowTips] = useState(true);\n    let tipButtonText = showTips ? \"Show player tips\" : \"Hide player tips\";\n\n    const [squares, setSquares] = useState(renderSquares());\n\n    const [showJumpModal, setShowJumpModal] = useState(false);\n    const [JumpModalValue, setJumpModalValue] = useState(null);\n\n    const [listOfMoves, setListOfMoves] = useState([]);\n\n    const context = useContext(MyContext);\n\n    let mode = context.difficulty === \"1\" ? \"Easy\" : context.difficulty === \"2\" ? \"Medium\" : \"Hard\"\n\n    function renderSquares() {\n        return counters.map((row, index) => {\n            let y = index;\n            return (\n                <tr key={y}>\n                    {\n                        row.map((piece, index) => <td key={y + index} className=\"p-0\"><Square state={piece} y={y} x={index} setSquareToMoveTo={setSquareToMoveTo} setCounterToMove={setCounterToMove}></Square></td>)\n                    }\n                </tr>\n            )\n        })\n    }\n\n    function checkMoveCounter(value) {\n        if (counterToMove.height + value === squareToMoveTo.height) {\n            if (counterToMove.width - 1 === squareToMoveTo.width || counterToMove.width + 1 === squareToMoveTo.width) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    function moveCounter() {\n        counters[counterToMove.height][counterToMove.width] = 5;\n        counters[squareToMoveTo.height][squareToMoveTo.width] = counterToMove.state;\n\n        kingMeCheck();\n        setCounters(counters);\n        setSquares(renderSquares());\n        props.setTurn(false);\n    }\n\n    function checkTakeCounter(value, playerToTake) {\n        if (counterToMove.height + value === squareToMoveTo.height) {\n            if (counterToMove.width - 2 === squareToMoveTo.width || counterToMove.width + 2 === squareToMoveTo.width) {\n                let res = (squareToMoveTo.height + counterToMove.height) / 2;\n                let res2 = (squareToMoveTo.width + counterToMove.width) / 2\n                if (counters[res][res2] === playerToTake) {\n                    return {\n                        result: true,\n                        height: res,\n                        width: res2\n                    }\n                }\n            }\n        }\n\n        return {\n            result: false\n        }\n    }\n\n    function takeCounter(res, res2) {\n        counters[counterToMove.height][counterToMove.width] = 5;\n        counters[squareToMoveTo.height][squareToMoveTo.width] = counterToMove.state;\n\n        if (counters[res][res2] === 2 || counters[res][res2] === 4) {\n            props.setPlayer2Counter(props.player2Counter + 1);\n        }\n\n        counters[res][res2] = 5;\n\n        kingMeCheck();\n        setCounters(counters);\n        setSquares(renderSquares());\n        props.setTurn(false);\n    }\n\n    function kingMeCheck() {\n        //Player 1 check\n        if (counterToMove.state === 1) {\n            if (squareToMoveTo.height === 0) {\n                counters[squareToMoveTo.height][squareToMoveTo.width] = 3;\n            }\n        }\n    }\n\n    function clearTips() {\n        for (let i = 0; i < counters.length; i++) {\n            for (let j = 0; j < counters[i].length; j++) {\n                if (counters[i][j] === 6) {\n                    counters[i][j] = 5;\n                }\n            }\n        }\n\n        setCounters(counters);\n        setSquares(renderSquares());\n    }\n\n    function displayTips() {\n        if (props.turn === true) {\n            let res = findPlayerMoves(counters, 1).concat(findPlayerMoves(counters, 3));\n            res.forEach(element => {\n                counters[element.height][element.width] = 6;\n            });\n        }\n    }\n\n    function showPlayerTips() {\n        if (props.turn) {\n            if (showTips) {\n                displayTips();\n                setShowTips(false);\n            }\n            else {\n                clearTips();\n                setShowTips(true);\n            }\n\n            setCounters(counters);\n            setSquares(renderSquares());\n        }\n    }\n\n    function noOneCanMoveCheck() {\n        let result = false;\n        let player1Moves = findPlayerMoves(counters, 1).concat(findPlayerMoves(counters, 3));\n        let player2Moves = findPlayerMoves(counters, 2).concat(findPlayerMoves(counters, 4));\n\n        if (player1Moves.length === 0 && player2Moves.length === 0) {\n            props.setResultsModalTitle(\"Tied game\");\n            props.setResultsModalMessage(\"No player can move. Therefore the game ends in a tie. I hope you had fun playing.\");\n            props.setShowResultModal(true);\n            result = true;\n        } else if (player1Moves.length === 0) {\n            props.setResultsModalTitle(\"Player 2 wins\");\n            props.setResultsModalMessage(\"Player 1 can no longer move. Player 2 wins. I hope you had fun playing.\");\n            props.setShowResultModal(true);\n            result = true;\n        } else if (player2Moves.length === 0) {\n            props.setResultsModalTitle(\"Player 1 wins\");\n            props.setResultsModalMessage(\"Player 2 can no longer move. Player 1 wins. I hope you had fun playing.\");\n            props.setShowResultModal(true);\n            result = true;\n        }\n\n        return result;\n    }\n\n    function checkToJumpUpAgain(value) {\n        try {\n            //left\n            if (counters[squareToMoveTo.height - 1][squareToMoveTo.width - 1] === value) {\n                if (counters[squareToMoveTo.height - 2][squareToMoveTo.width - 2] === 5 || counters[squareToMoveTo.height - 2][squareToMoveTo.width - 2] === 6) {\n                    return true;\n                }\n            }\n\n            //Right\n            if (counters[squareToMoveTo.height - 1][squareToMoveTo.width + 1] === value) {\n                if (counters[squareToMoveTo.height - 2][squareToMoveTo.width + 2] === 5 || counters[squareToMoveTo.height - 2][squareToMoveTo.width + 2] === 6) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        catch {\n            return false;\n        }\n    }\n\n    function checkToJumpDownAgain(value) {\n        try {\n            //left\n            if (counters[squareToMoveTo.height + 1][squareToMoveTo.width - 1] === value) {\n                if (counters[squareToMoveTo.height + 2][squareToMoveTo.width - 2] === 5 || counters[squareToMoveTo.height + 2][squareToMoveTo.width - 2] === 6) {\n                    return true;\n                }\n            }\n\n            //Right\n            if (counters[squareToMoveTo.height + 1][squareToMoveTo.width + 1] === value) {\n                if (counters[squareToMoveTo.height + 2][squareToMoveTo.width + 2] === 5 || counters[squareToMoveTo.height + 2][squareToMoveTo.width + 2] === 6) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n        catch {\n            return false;\n        }\n    }\n\n    function undo() {\n        if (listOfMoves.length !== 0) {\n            if (showTips === false) {\n                setShowTips(true);\n            }\n\n            let temp = listOfMoves[listOfMoves.length - 1];\n            for (let i = 0; i < counters.length; i++) {\n                for (let j = 0; j < counters[i].length; j++) {\n                    if (temp.board[i][j] === 6) {\n                        counters[i][j] = 5;\n                    }\n                    else if (counters[i][j] !== temp.board[i][j]) {\n                        counters[i][j] = temp.board[i][j];\n                    }\n                }\n            }\n\n            props.setTurn(temp.turn);\n\n            listOfMoves.pop();\n\n            let piecesTakenPlayer1 = 12 - calculatePiecesTaken(1);\n            props.setPlayer1Counter(piecesTakenPlayer1);\n            let piecesTakenPlayer2 = 12 - calculatePiecesTaken(2);\n            props.setPlayer2Counter(piecesTakenPlayer2);\n\n            setSquares(renderSquares());\n        }\n    }\n\n    function saveBoard() {\n        let copyBoard = [];\n        for (let i = 0; i < counters.length; i++) {\n            copyBoard[i] = counters[i].slice();\n        }\n        setListOfMoves(moves => [...moves, {\n            turn: props.turn,\n            board: copyBoard\n        }]);\n    }\n\n    function calculatePiecesTaken(player) {\n        let counter = 0;\n        for (let i = 0; i < counters.length; i++) {\n            for (let j = 0; j < counters[i].length; j++) {\n                if (counters[i][j] === player || counters[i][j] === player + 2) {\n                    counter++;\n                }\n            }\n        }\n\n        return counter\n    }\n\n    function player2Go() {\n        setTimeout(() => {\n            let player2Move;\n            if (context.difficulty === \"1\") {\n                player2Move = pickMoveForPlayer2(counters);\n            }\n            else if (context.difficulty === \"2\") {\n                player2Move = automatedPlayerV2(counters, 4, true)[1];\n            }\n            else {\n                player2Move = automatedPlayerV3(counters, 2, true)[1];\n            }\n\n            if (player2Move !== null && player2Move !== {} && player2Move !== undefined) {\n                if (player2Move.takes.length !== 0) {\n                    player2Move.takes.forEach(element => {\n                        counters[element.height][element.width] = 5;\n                    });\n                    props.setPlayer1Counter(props.player1Counter + player2Move.takes.length);\n                }\n\n                let tempValue = counters[player2Move.currentHeight][player2Move.currentWidth];\n                counters[player2Move.currentHeight][player2Move.currentWidth] = 5;\n                counters[player2Move.nextHeight][player2Move.nextWidth] = tempValue;\n\n                if (player2Move.nextHeight === 7) {\n                    counters[player2Move.nextHeight][player2Move.nextWidth] = 4;\n                }\n\n                setCounters(counters);\n                setSquares(renderSquares());\n                props.setTurn(true);\n                noOneCanMoveCheck();\n            }\n        }, 500)\n    }\n\n    useEffect(() => {\n        let player2ToGoNext = true;\n        let validMove = false;\n        //Player1 \n        if (props.turn) {\n            if (counterToMove != null && squareToMoveTo != null) {\n                if (counterToMove.state === 1) {\n                    let canTake = checkTakeCounter(-2, 2);\n                    if (canTake.result) {\n                        saveBoard();\n                        takeCounter(canTake.height, canTake.width);\n                        validMove = true;\n                        if (checkToJumpUpAgain(2)) {\n                            player2ToGoNext = false;\n                            setShowJumpModal(true);\n                        }\n                    }\n                    else if (checkMoveCounter(-1)) {\n                        saveBoard();\n                        moveCounter();\n                        validMove = true;\n                    }\n                }\n                else if (counterToMove.state === 3) {\n                    if (counterToMove.height - 1 === squareToMoveTo.height || counterToMove.height + 1 === squareToMoveTo.height) {\n                        if (counterToMove.width - 1 === squareToMoveTo.width || counterToMove.width + 1 === squareToMoveTo.width) {\n                            saveBoard();\n                            moveCounter();\n                            validMove = true;\n                        }\n                    }\n                    else if (counterToMove.height - 2 === squareToMoveTo.height || counterToMove.height + 2 === squareToMoveTo.height) {\n                        if (counterToMove.width - 2 === squareToMoveTo.width || counterToMove.width + 2 === squareToMoveTo.width) {\n                            let res = (squareToMoveTo.height + counterToMove.height) / 2;\n                            let res2 = (squareToMoveTo.width + counterToMove.width) / 2;\n                            //Player 1 king takes player 2\n                            if (counters[res][res2] === 2 || counters[res][res2] === 4) {\n                                saveBoard();\n                                takeCounter(res, res2);\n                                validMove = true;\n                                if (checkToJumpUpAgain(2) || checkToJumpUpAgain(4) || checkToJumpDownAgain(2) || checkToJumpDownAgain(4)) {\n                                    player2ToGoNext = false;\n                                    setShowJumpModal(true);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                clearTips();\n                setShowTips(true);\n                setCounterToMove(null);\n                setSquareToMoveTo(null);\n\n                let result = noOneCanMoveCheck();\n                if (result) {\n                    player2ToGoNext = false;\n                }\n\n                if (player2ToGoNext && validMove) {\n                    player2Go();\n                }\n                else if (validMove === false) {\n                    alert(\"Invalid move\");\n                }\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [squareToMoveTo, counterToMove, counters])\n\n    useEffect(() => {\n        if (JumpModalValue) {\n            props.setTurn(true);\n            setJumpModalValue(null);\n        }\n        else if (JumpModalValue === false) {\n            player2Go();\n            setJumpModalValue(null);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [JumpModalValue, props])\n\n    return (\n        <Container fluid>\n            <div className=\"d-flex justify-content-center mb-3\">\n                <h2>PC Mode: {mode}</h2>\n            </div>\n\n            <ButtonToolbar className=\"d-flex justify-content-center mb-2\">\n                <ButtonGroup className=\"ml-2 mr-2 mb-4\">\n                    <Button onClick={showPlayerTips} size=\"lg\">{tipButtonText}</Button>\n                </ButtonGroup>\n                <ButtonGroup className=\"ml-2 mr-2 mb-4\">\n                    <Button onClick={undo} size=\"lg\">Undo</Button>\n                </ButtonGroup>\n            </ButtonToolbar>\n\n            <JumpModal show={showJumpModal} update={setShowJumpModal} setJumpModalValue={setJumpModalValue} />\n\n            <div className=\"d-flex justify-content-center\">\n                <table className=\"gameBorder\">\n                    <tbody className=\"border border-dark\">\n                        {squares}\n                    </tbody>\n                </table>\n            </div>\n        </Container>\n    )\n}","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../style/Counter.css';\n\nexport default function Players(props) {\n    return (\n        <div>\n            <Row className=\"p-3\">\n                <div className={\"circle2 red center\" + (props.turn === true ? \" yellow\" : \"\")}></div>\n                <h3 className=\"p-4\">Player 1</h3>\n            </Row>\n            <br></br>\n            <Row className=\"p-3\">\n                <div className={\"circle2 blue center\" + (props.turn === false ? \" yellow\" : \"\")}></div>\n                <h3 className=\"p-4\">Player 2</h3>\n            </Row>\n        </div>\n    )\n}","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../style/Counter.css';\n\nexport default function Pieces(props) {\n    return (\n        <div>\n            <Row className=\"p-3\">\n                <div className=\"circle2 red center\"></div>\n                <h3 className=\"p-4\">Single</h3>\n            </Row>\n            <br></br>\n            <Row className=\"p-3\">\n                <div className=\"circle2 red center\">K</div>\n                <h3 className=\"p-4\">King</h3>\n            </Row>\n        </div>\n    )\n}","import React from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../style/Counter.css';\n\nexport default function PiecesTaken(props) {\n    return (\n        <div>\n            <Row className=\"p-3\">\n                <div className=\"circle2 red center\"></div>\n                <h3 className=\"m-0 p-4\">{props.player1Counter}</h3>\n            </Row>\n            <br></br>\n            <Row className=\"p-3\">\n                <div className=\"circle2 blue center\"></div>\n                <h3 className=\"p-4\">{props.player2Counter}</h3>\n            </Row>\n        </div>\n    )\n}","import React from \"react\";\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function ResultModal(props) {\n    const handleClose = () => props.update(false);\n\n    const handleRestart = () => window.location.reload();;\n\n    return (\n        <div>\n            <Modal show={props.show} onHide={handleClose} backdrop=\"static\">\n                <Modal.Header closeButton>\n                    <Modal.Title>{props.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{props.message}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"danger\" onClick={handleClose}>\n                        Close\n                    </Button>\n                    <Button variant=\"success\" onClick={handleRestart}>\n                        Restart\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    )\n}","import React, { useState, useEffect, useContext } from \"react\";\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport DisplayCard from '../shared/DisplayCard';\nimport Board from './Board';\nimport PcBoard from './PcBoard';\nimport Players from '../home/Players';\nimport Pieces from '../home/Pieces';\nimport PiecesTaken from '../home/PiecesTaken';\nimport ResultModal from '../home/ResultModal';\nimport { MyContext } from '../../store/MyProvider';\n\nexport default function Home(props) {\n    const [player1Counter, setPlayer1Counter] = useState(0);\n    const [player2Counter, setPlayer2Counter] = useState(0);\n\n    const [showResultModal, setShowResultModal] = useState(false);\n    const [resultsModalTitle, setResultsModalTitle] = useState(\"\");\n    const [resultsModalMessage, setResultsModalMessage] = useState(\"\");\n\n    const context = useContext(MyContext);\n\n    //Player 1 - true\n    //Player 2 - false\n    const [turn, setTurn] = useState(true);\n\n    useEffect(() => {\n        if (player1Counter === 12) {\n            setResultsModalTitle(\"Player 2 wins\");\n            setResultsModalMessage(\"Well done on finishing the game of draughts. I hope you had fun playing.\");\n            setShowResultModal(true);\n        }\n        else if (player2Counter === 12) {\n            setResultsModalTitle(\"Player 1 wins\");\n            setResultsModalMessage(\"Well done on finishing the game of draughts. I hope you had fun playing.\");\n            setShowResultModal(true);\n        }\n\n    }, [player1Counter, player2Counter])\n\n    return (\n        <Row>\n            <ResultModal show={showResultModal} update={setShowResultModal} title={resultsModalTitle} message={resultsModalMessage}></ResultModal>\n            <Col xl=\"1\"></Col>\n            <Col xl=\"7\">\n                {\n                    context.pcOr2Player === \"true\" ?\n                        <PcBoard player1Counter={player1Counter} setPlayer1Counter={setPlayer1Counter} player2Counter={player2Counter} setPlayer2Counter={setPlayer2Counter} turn={turn} setTurn={setTurn} setResultsModalTitle={setResultsModalTitle} setShowResultModal={setShowResultModal} setResultsModalMessage={setResultsModalMessage} /> :\n                        <Board player1Counter={player1Counter} setPlayer1Counter={setPlayer1Counter} player2Counter={player2Counter} setPlayer2Counter={setPlayer2Counter} turn={turn} setTurn={setTurn} setResultsModalTitle={setResultsModalTitle} setShowResultModal={setShowResultModal} setResultsModalMessage={setResultsModalMessage} />\n                }\n                <br></br>\n            </Col>\n            <Col xl=\"3\">\n                <DisplayCard title=\"Players\" innerComponent={<Players turn={turn}></Players>}></DisplayCard>\n                <br></br>\n                <DisplayCard title=\"Pieces\" innerComponent={<Pieces></Pieces>}></DisplayCard>\n                <br></br>\n                <DisplayCard title=\"Pieces Taken\" innerComponent={<PiecesTaken player1Counter={player1Counter} player2Counter={player2Counter}></PiecesTaken>}></DisplayCard>\n                <br></br>\n            </Col>\n            <Col xl=\"1\"></Col>\n        </Row>\n    )\n}\n","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport '../../style/HowToPlay.css';\n\nexport default function HowToPlay() {\n    return (\n        <Container fluid>\n            <Row>\n                <Col xl=\"1\"></Col>\n                <Col xl=\"10\">\n                    <div>\n                        <h1>How To Play Draughts</h1>\n                    </div>\n                    <div>\n                        <h2>Goal</h2>\n                        <p>The goal of the game of draughts is to take all of the opponent's pieces.</p>\n                    </div>\n                    <div>\n                        <h2>Summary</h2>\n                        <p>Draughts is a simple game with limited movement. There are two types of pieces in the game. Singles and kings, they can be differentiated with kings having a 'K' in the centre of the game piece. Singles can only move towards the opponents end of the board whereas kings can move both up and down the board. The game starts with only single pieces in play. Kings can be achieved by a player moving a piece to the far end of the board.</p>\n                        <p>Players take it in turn to move a single game piece. Pieces can only move in a diagonal direction by one square therefore not white square can be used. Only one piece can occupy a square. Players can take an opponents piece by jumping a character if the square diagonally behind the piece is available.</p>\n                    </div>\n                    <div>\n                        <h2>Rules</h2>\n                        <ul>\n                            <li>Player play the game in turns</li>\n                            <li>Players can only move one piece during a turn</li>\n                            <li>Kings are automatically created</li>\n                            <li>Piece can only move diagonally</li>\n                            <li>Singles only move towards to the opponent</li>\n                            <li>Kings can only move up and down</li>\n                            <li>Pieces can only take a character if the space diagonally behind it is free</li>\n                        </ul>\n                    </div>\n                    <div>\n                        <h2>How to play</h2>\n                        <p>A yellow ring will appear around the piece to identify whos turn it is in the players section.</p>\n                        <p>The pieces taken section will keep count of the pieces taken, once a player gets to 12 they lose.</p>\n                        <p>To move a piece click on the piece you want to move and the square you want to move it to. The game will do the rest and make you the move is valid.</p>\n                        <p>The game will automatically king piece.</p>\n                    </div>\n                </Col>\n                <Col xl=\"1\"></Col>\n            </Row>\n        </Container>\n    )\n}","import React from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Alert from 'react-bootstrap/Alert';\n\nexport default function ProjectCard(props) {\n    let list = props.features.map((feature, index) => {\n        return (<li key={index}>{feature}</li>)\n    })\n\n    return (\n        <Card>\n            <Card.Body>\n                <Card.Header><h3>{props.title}</h3></Card.Header>\n                <Card.Text>\n                    <h5>Features</h5>\n                    <ul>\n                        {list}\n                    </ul>\n                </Card.Text>\n                <Alert variant={props.colour}>{props.status}</Alert>\n            </Card.Body>\n        </Card>\n    )\n}","import React from 'react';\nimport ProjectCard from '../shared/ProjectCard';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nexport default function About() {\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col xl=\"1\"></Col>\n                <Col xl=\"10\">\n                    <div>\n                        <h1>About</h1>\n                        <p>This game was made in loving memory of my grandad, Ernest Rumbol. My grandad taught me this game many years ago. Over the years we have played thousands of games together. As I got older and understood the game more, the more games I won. However, grandad still loved playing even when he wiped the board clean because he lost the game after the first move. We played with many different rule sets, his favourite was forcing users to take a piece if available, I thought the game was more tactical if you didn't. I hope that people play this game with as much fun as we did.</p>\n                    </div>\n                    <div>\n                        <h2>Technical information</h2>\n                        <p>Below lets the tools used to build this web application. You can find the source code at the <a href=\"https://github.com/OllieRumbol/draughtsgame\">Git Repo</a></p>\n                        <ul>\n                            <li><a href=\"https://reactjs.org/\">React with hooks</a></li>\n                            <li><a href=\"https://react-bootstrap.github.io/\">React bootstrap</a></li>\n                            <li><a href=\"https://reactrouter.com/web/guides/quick-start\">React router</a></li>\n                            <li><a href=\"https://pages.github.com/\">Git pages (for hosting)</a></li>\n                            <li><a href=\"https://testing-library.com/docs/react-testing-library/intro/\">React testing</a></li>\n                        </ul>\n                    </div>\n                    <div>\n                        <h2>Project Plan</h2>\n                        <div className=\"card-columns\">\n                            <ProjectCard title=\"Draughts Game Phase 1 Epic\" colour=\"success\" features={[\"React Project Setup ✔\", \"Board setup ✔\", \"Counter setup ✔\", \"UI design ✔\", \"Move counter ✔\", \"Take counter ✔\", \"Game end ✔\", \"King me ✔\", \"Turns ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"React Router Epic\" colour=\"success\" features={[\"Setup ✔\", \"Refactor ✔\", \"Production changes ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"Pages Epic\" colour=\"success\" features={[\"How to play ✔\", \"About ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"CI/CD and Unit Tests Epic\" colour=\"warning\" features={[\"Create basic pipeline in yaml ✔\", \"Setup testing environment and add to pipeline ✔\", \"Unit test components\", \"Unit test web app logic\"]} status=\"In progress\"></ProjectCard>\n                            <ProjectCard title=\"Player tips Epic\" colour=\"success\" features={[\"UI changes to display user tips ✔\", \"Logic to work out where a player can move ✔\", \"Logic to work out where a player can take another counter ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"Draughts Game Phase 2 Epic\" colour=\"success\" features={[\"Double jumps ✔\", \"Game over - no one can move ✔\", \"Restart ✔\", \"Undo ✔\", \"CSS for selecting a counter ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"Automated 2nd Player Phase 1 Epic\" colour=\"success\" features={[\"Game setup page, 2 player or VS PC. Along with other settings ✔\", \"Web app logic for PC to decide next move (random logic) ✔\", \"Render PC move on page ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"Automated 2nd Player Phase 2 Epic\" colour=\"success\" features={[\"Use some kind of genetic search algorithm to find best move ✔\", \"Add new setting to the game setting page for other opponent type ✔\", \"Use new setting in the frontend ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"Mobile responsive UI Epic\" colour=\"success\" features={[\"Game setup page is mobile responsive ✔\", \"Game board page is mobile responsive ✔\", \"How to play page is mobile responsive ✔\", \"About page is mobile responsive ✔\"]} status=\"Complete\"></ProjectCard>\n                            <ProjectCard title=\"Draughts Game Phase 3 Epic\" colour=\"warning\" features={[\"Setting to decide who goes first\", \"Setting for if singles can take kings\", \"Update how to play\", \"Give up button\", \"Go back to player settings\", \"Display mode when against PC ✔\", \"Error message for game settings\"]} status=\"In progress\"></ProjectCard>\n                            <ProjectCard title=\"Automated 2nd Player Phase 3 Epic\" colour=\"warning\" features={[\"Refactor logic from V1 and V2\", \"Improve algorithm with alpha beta pruning\", \"Experiment with different depths ✔\", \"Improve evaluation function ✔\", \"Add new setting for new mode and use in frontend ✔\"]} status=\"In progress\"></ProjectCard>\n                            <ProjectCard title=\"Tutorial Epic\" colour=\"danger\" features={[]} status=\"Not started\"></ProjectCard>\n                            <ProjectCard title=\"Support Epic\" colour=\"danger\" features={[\"Game tips results in no possible moves ✔ (26/1/21)\", \"Player tips not showing all possible moves for a king ✔ (31/1/21)\", \"Player tips infinite loop ✔ (1/2/21)\", \"Double jumps and undo ✔ (2/2/21)\", \"Undo is hiding player tips when no moves have been made ✔ (6/2/21)\", \"Change board layout, currently back to front ✔ (16/2/21)\", \"No more moves check is too late ✔ (18/2/21)\", \"Clicking off modal closes modal ✔ (26/2/21)\"]} status=\"Paused due to no further work\"></ProjectCard>\n                            <ProjectCard title=\"Technical Debt Epic Epic\" colour=\"danger\" features={[\"Refactor main use effect logic ✔ (28/1/21)\", \"Refactor player tips logic\", \"Replace JS alert with bootstrap modal for invalid more\"]} status=\"Paused due to no further work\"></ProjectCard>\n                        </div>\n                    </div>\n                    <br></br>\n                </Col>\n                <Col xl=\"1\"></Col>\n            </Row>\n        </Container>\n    )\n}","import React, { useContext } from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport { MyContext } from '../../store/MyProvider';\nimport '../../style/GameSettings.css'\n\nexport default function GameSettings(props) {\n    const context = useContext(MyContext);\n\n    const handleSubmit = () => {\n        if (context.pcOr2Player != null) {\n            if ((context.pcOr2Player === \"true\" && context.difficulty !== \"0\") || context.pcOr2Player === \"false\") {\n                props.setHasSetGameSettings(true);\n            }\n        }\n    }\n\n    return (\n        <Container fluid>\n            <Row>\n                <Col xl=\"1\"></Col>\n                <Col xl=\"10\">\n                    <div>\n                        <h1>Game settings</h1>\n                    </div>\n                    <div>\n                        <div>\n                            <h2 className=\"pb-2\">Opponent</h2>\n                        </div>\n                        <div>\n                            <label className=\"radioContainer\">\n                                <div className=\"topper\">PC</div>\n                                <input type=\"radio\" name=\"radio\" value=\"true\" onChange={context.handlePcOr2PlayerChange} checked={context.pcOr2Player === \"true\"} />\n                                <span className=\"checkMark\"></span>\n                            </label>\n                        </div>\n                        <div>\n                            <label className=\"radioContainer\">\n                                <div className=\"topper\">2 Player</div>\n                                <input type=\"radio\" name=\"radio\" value=\"false\" onChange={context.handlePcOr2PlayerChange} checked={context.pcOr2Player === \"false\"} />\n                                <span className=\"checkMark\"></span>\n                            </label>\n                        </div>\n                        {\n                            context.pcOr2Player === \"true\" &&\n                            <div>\n                                <h2 className=\"pb-2\">Difficulty</h2>\n                                <div>\n                                    <label className=\"radioContainer\">\n                                        <div className=\"topper\">Easy</div>\n                                        <input type=\"radio\" name=\"radio2\" value=\"1\" onChange={context.handleDifficulty} checked={context.difficulty === \"1\"} />\n                                        <span className=\"checkMark\"></span>\n                                    </label>\n                                </div>\n                                <div>\n                                    <label className=\"radioContainer\">\n                                        <div className=\"topper\">Medium</div>\n                                        <input type=\"radio\" name=\"radio2\" value=\"2\" onChange={context.handleDifficulty} checked={context.difficulty === \"2\"} />\n                                        <span className=\"checkMark\"></span>\n                                    </label>\n                                </div>\n                                <div>\n                                    <label className=\"radioContainer\">\n                                        <div className=\"topper\">Hard</div>\n                                        <input type=\"radio\" name=\"radio2\" value=\"3\" onChange={context.handleDifficulty} checked={context.difficulty === \"3\"} />\n                                        <span className=\"checkMark\"></span>\n                                    </label>\n                                </div>\n                            </div>\n                        }\n                    </div>\n                    <div>\n                        <Button variant=\"success\" onClick={handleSubmit} size=\"lg\">Submit</Button>\n                    </div>\n                </Col>\n                <Col xl=\"1\"></Col>\n            </Row>\n            <br></br>\n        </Container>\n    )\n}\n\n","import React, { useState } from 'react';\nimport Home from '../home/Home';\nimport HowToPlay from '../howToPlay/HowToPlay';\nimport About from '../about/About';\nimport GameSettings from '../home/GameSettings';\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport Button from 'react-bootstrap/Button';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport MyProvider from '../../store/MyProvider';\nimport '../../style/App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nexport default function App() {\n  const [hasSetGameSettings, setHasSetGameSettings] = useState(false);\n\n  return (\n    <MyProvider>\n      <Router>\n        <Container fluid>\n          <Jumbotron fluid className=\"pb-3\">\n            <Container>\n              <div className=\"d-flex justify-content-center\">\n                <h1 data-testid=\"title\" className=\"font-weight-bold title\">Draughts Game</h1>\n              </div>\n              <br></br>\n              <div className=\"d-flex justify-content-center\">\n                <h4>A draughts game built in react js</h4>\n              </div>\n              <hr className=\"my-4\"></hr>\n              <ButtonToolbar className=\"d-flex justify-content-center\">\n                <Link to=\"/\">\n                  <ButtonGroup className=\"mr-3 mb-3\">\n                    <Button data-testid=\"link\" variant=\"primary\" size=\"lg\">Home</Button>\n                  </ButtonGroup>\n                </Link>\n                <Link to=\"/howtoplay\">\n                  <ButtonGroup className=\"mr-3 mb-3\">\n                    <Button data-testid=\"link\" variant=\"primary\" size=\"lg\">How to play</Button>\n                  </ButtonGroup>\n                </Link>\n                <Link to=\"/about\">\n                  <ButtonGroup className=\"mr-3 mb-3\">\n                    <Button data-testid=\"link\" variant=\"primary\" size=\"lg\">About</Button>\n                  </ButtonGroup>\n                </Link>\n              </ButtonToolbar>\n            </Container>\n          </Jumbotron>\n          <main>\n            <Switch>\n              <Route path=\"/\" exact component={() => {\n                if (hasSetGameSettings) {\n                  return <Home />\n                }\n                else {\n                  return <GameSettings setHasSetGameSettings={setHasSetGameSettings} />\n                }\n              }} />\n              <Route path=\"/howtoplay\" exact component={() => <HowToPlay />} />\n              <Route path=\"/about\" exact component={() => <About />} />\n            </Switch>\n          </main>\n        </Container>\n      </Router>\n    </MyProvider>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './style/index.css';\nimport App from './components/shared/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}